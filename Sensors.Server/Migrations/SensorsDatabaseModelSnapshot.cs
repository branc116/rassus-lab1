// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sensors.Server.Db;

#nullable disable

namespace Sensors.Server.Migrations
{
    [DbContext(typeof(SensorsDatabase))]
    partial class SensorsDatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0-rc.2.21480.5");

            modelBuilder.Entity("Sensors.Server.Db.Reading", b =>
                {
                    b.Property<long>("RedingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("CO")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Humidity")
                        .HasColumnType("INTEGER");

                    b.Property<long>("NO2")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Pressure")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SO2")
                        .HasColumnType("INTEGER");

                    b.Property<long>("SensorId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SensorId1")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Temperature")
                        .HasColumnType("INTEGER");

                    b.HasKey("RedingId");

                    b.HasIndex("SensorId");

                    b.HasIndex("SensorId1");

                    b.ToTable("Readings");
                });

            modelBuilder.Entity("Sensors.Server.Db.Sensor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Ip")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("TEXT");

                    b.Property<long>("Latitude")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Longditude")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Port")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ToSensorId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ToSensorId1")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ToSensorId");

                    b.HasIndex("ToSensorId1");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("Sensors.Server.Db.Reading", b =>
                {
                    b.HasOne("Sensors.Server.Db.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sensors.Server.Db.Sensor", null)
                        .WithMany("Readings")
                        .HasForeignKey("SensorId1");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Sensors.Server.Db.Sensor", b =>
                {
                    b.HasOne("Sensors.Server.Db.Sensor", null)
                        .WithMany("FromSensors")
                        .HasForeignKey("ToSensorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sensors.Server.Db.Sensor", "ToSensor")
                        .WithMany()
                        .HasForeignKey("ToSensorId1");

                    b.Navigation("ToSensor");
                });

            modelBuilder.Entity("Sensors.Server.Db.Sensor", b =>
                {
                    b.Navigation("FromSensors");

                    b.Navigation("Readings");
                });
#pragma warning restore 612, 618
        }
    }
}
